SPR# 状 P Open Close ver     Type  概要
-------------------------------------------------------------------------------
0001 ◎ C 03/17 03/17 0.001│ToDo│プロジェクト作成
0002 ◎ C 03/17 03/17 0.001│ToDo│"pico-dnn.h" 作成し、Layer 基底クラス宣言
0003 ◎ C 03/17 03/17 0.001│ToDo│FullyConnected_Layer : public Layer 実装
0004 ◎ C 03/17 03/17 0.001│ToDo│Layer オブジェクトを保持する Net クラス実装
0005 ◎ C 03/17 03/17 0.001│ToDo│２入力１出力2層ネットで [1, 1] -> 1 を学習させてみる
0006 ◎ C 03/17 03/17 0.001│ToDo│FullyConnected_Layer::weights_ を表示可能に
0007 ◎ C 03/17 03/17 0.001│ToDo│Layer, Net::forward() の入力は const float* も可能に
0008 ◎ C 03/17 03/17 0.001│ToDo│２入力１出力2層ネットで and(x1, x2) を学習させてみる
									結果：10万エポックでも and(1, 1) -> 0.7 程度までしか学習できなかった
0009 ◎ C 03/17 03/17 0.001│ToDo│ReLU クラス実装
									結果：fc->ReLU->fc であれば and(x1, x2) を正しく学習できた
0010 ◎ C 03/18 03/18 0.001│ToDo│or(x1, x2) を学習してみる x1, x2 = {0 | 1}
0011 ◎ C 03/18 03/18 0.001│ToDo│xor(x1, x2) を学習してみる
0012 ◎ C 03/18 03/18 0.001│ToDo│add(x1, x2) を学習してみる
0013 ◎ C 03/18 03/18 0.001│ToDo│第一引数が vector な forward() は廃止
0014 ◎ C 03/18 03/18 0.001│ToDo│SoftMax レイヤー実装
0015 ◎ C 03/18 03/18 0.001│ToDo│（0|1）４入力→fc→ReLU→fc→SoftMax→（１入力個数で）３クラス分類
0016 ◎ C 03/18 03/18 0.001│ToDo│MNIST 画像・ラベルデータ読み込み
0017 ◎ C 03/18 03/18 0.001│ToDo│MNIST 画像・ラベルデータ先頭１０個を表示してみる
0018 ◎ C 03/18 03/18 0.001│ToDo│MNIST 画像・ラベルデータ先頭１０個で学習してみる
0019 ● C 03/18            │ToDo│損失計算
0020 ◎ C 03/18 03/19 0.001│ToDo│正解率計算
0021 ◎ C 03/18 03/19 0.001│ToDo│backward()：重みを直接変更せず、差分を累積し、update() で適用可能に
0022 ◎ C 03/18 03/19 0.001│ToDo│ミニバッチ処理を試してみる
0023 ◎ C 03/19 03/19 0.001│ToDo│MNIST 全画像を１エポックオンライン（バッチサイズが1）学習してみる
0024 ◎ C 03/20 03/20 0.001│ToDo│MNIST テストデータで正解率計算
0025 ◎ C 03/20 03/20 0.001│ToDo│MNIST 学習・テストデータ・ラベル読み込みを関数化
0026 ● C 03/20            │ToDo│学習データで数エポック学習・テストしてみる
0027 ◎ C 03/23 03/23 0.001│ToDo│正規化（平均：０，標準偏差：１）層追加
0028 ● C 03/23            │ToDo│フルコネクト層：重み初期化を最適化？
0029 ◎ C 03/26 03/26 0.001│ToDo│fc->ReLU->fc->ReLU->fc->SoftMax（中間層は 100 ノード）にしてみる
									結果：１エポック学習で正解率18.25%にしかならなかった
0030 ● C 03/26            │ToDo│
